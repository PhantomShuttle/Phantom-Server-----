
servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000005f0  00800060  00000b98  00000c2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000044  00800650  00800650  0000121c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000121c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  0000124c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bc6  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000209  00000000  00000000  00001eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002db  00000000  00000000  000020bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000244  00000000  00000000  00002398  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000216  00000000  00000000  000025dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001568  00000000  00000000  000027f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00003d5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 c3 03 	jmp	0x786	; 0x786 <__vector_10>
  2c:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	16 e0       	ldi	r17, 0x06	; 6
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e9       	ldi	r30, 0x98	; 152
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 35       	cpi	r26, 0x50	; 80
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	26 e0       	ldi	r18, 0x06	; 6
  78:	a0 e5       	ldi	r26, 0x50	; 80
  7a:	b6 e0       	ldi	r27, 0x06	; 6
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 39       	cpi	r26, 0x94	; 148
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fd 01 	call	0x3fa	; 0x3fa <main>
  8a:	0c 94 ca 05 	jmp	0xb94	; 0xb94 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <OledWriteByte>:
{unsigned int d0,d1,d2,d3,d4;

	d0=Digit/10000;
	Digit=Digit-d0*10000;
	d1=Digit/1000;
	Digit=Digit-d1*1000;
  92:	61 30       	cpi	r22, 0x01	; 1
  94:	11 f4       	brne	.+4      	; 0x9a <OledWriteByte+0x8>
  96:	94 9a       	sbi	0x12, 4	; 18
	d2=Digit/100;
  98:	0d c0       	rjmp	.+26     	; 0xb4 <OledWriteByte+0x22>
  9a:	94 98       	cbi	0x12, 4	; 18
  9c:	0b c0       	rjmp	.+22     	; 0xb4 <OledWriteByte+0x22>
  9e:	97 98       	cbi	0x12, 7	; 18
  a0:	88 23       	and	r24, r24
  a2:	14 f4       	brge	.+4      	; 0xa8 <OledWriteByte+0x16>
  a4:	96 9a       	sbi	0x12, 6	; 18
  a6:	01 c0       	rjmp	.+2      	; 0xaa <OledWriteByte+0x18>
  a8:	96 98       	cbi	0x12, 6	; 18
  aa:	97 9a       	sbi	0x12, 7	; 18
  ac:	88 0f       	add	r24, r24
  ae:	91 50       	subi	r25, 0x01	; 1
	Digit=Digit-d2*100;
  b0:	b1 f7       	brne	.-20     	; 0x9e <OledWriteByte+0xc>
  b2:	08 95       	ret
  b4:	98 e0       	ldi	r25, 0x08	; 8
  b6:	f3 cf       	rjmp	.-26     	; 0x9e <OledWriteByte+0xc>

000000b8 <OledClearn>:
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	d0 eb       	ldi	r29, 0xB0	; 176
  be:	60 e0       	ldi	r22, 0x00	; 0
	d3=Digit/10;
  c0:	8d 2f       	mov	r24, r29
  c2:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	80 e1       	ldi	r24, 0x10	; 16
  d2:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
  d6:	c0 e0       	ldi	r28, 0x00	; 0
	Digit=Digit-d3*10;
	d4=Digit%10;
	
	xianshi1(d0,y,x);
  d8:	61 e0       	ldi	r22, 0x01	; 1
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
	xianshi1(d1,y,x+6+i);
  e0:	cf 5f       	subi	r28, 0xFF	; 255
  e2:	c0 38       	cpi	r28, 0x80	; 128
  e4:	c9 f7       	brne	.-14     	; 0xd8 <OledClearn+0x20>
  e6:	df 5f       	subi	r29, 0xFF	; 255
  e8:	d8 3b       	cpi	r29, 0xB8	; 184
  ea:	49 f7       	brne	.-46     	; 0xbe <OledClearn+0x6>
  ec:	df 91       	pop	r29
	xianshi1(d2,y,x+(6+i)*2);
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <OledInit>:
  f2:	95 98       	cbi	0x12, 5	; 18
  f4:	95 9a       	sbi	0x12, 5	; 18
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	8e ea       	ldi	r24, 0xAE	; 174
  fa:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	85 ed       	ldi	r24, 0xD5	; 213
 102:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
	xianshi1(d3,y,x+(6+i)*3);
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	80 e8       	ldi	r24, 0x80	; 128
 10a:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
 10e:	60 e0       	ldi	r22, 0x00	; 0
	xianshi1(d4,y,x+(6+i)*4);
 110:	88 ea       	ldi	r24, 0xA8	; 168
 112:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
	d1=Digit/1000;
	Digit=Digit-d1*1000;
	d2=Digit/100;
	Digit=Digit-d2*100;
	d3=Digit/10;
	Digit=Digit-d3*10;
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	8f e3       	ldi	r24, 0x3F	; 63
 11a:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	83 ed       	ldi	r24, 0xD3	; 211
 122:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
	d4=Digit%10;
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	80 e4       	ldi	r24, 0x40	; 64
 132:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	8d e8       	ldi	r24, 0x8D	; 141
 13a:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	84 e1       	ldi	r24, 0x14	; 20
 142:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	80 e2       	ldi	r24, 0x20	; 32
 14a:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	80 e1       	ldi	r24, 0x10	; 16
 152:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	81 ea       	ldi	r24, 0xA1	; 161
	
	xianshi1(d0,y,x);
	xianshi1(d1,y,x+6+i);
	xianshi1(d2,y,x+(6+i)*2);
	xianshi1(d3,y,x+(6+i)*3);
	xianshi1(d4,y,x+(6+i)*4);
 15a:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	88 ec       	ldi	r24, 0xC8	; 200
 162:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
}
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	8a ed       	ldi	r24, 0xDA	; 218
 16a:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	82 e1       	ldi	r24, 0x12	; 18
 172:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	81 e8       	ldi	r24, 0x81	; 129
 17a:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
 17e:	60 e0       	ldi	r22, 0x00	; 0
	OledWriteByte(SET_COM_PINS_CONFIG,OLED_CMD); 			  //设置COM硬件引脚配置命令
	OledWriteByte(0x12,OLED_CMD);

	/*对比度设置*/
	OledWriteByte(SET_CONTRAST_CONTROL,OLED_CMD); 			   //对比度设置命令
	OledWriteByte(0x8F,OLED_CMD); 							   //对比度值，取值范围1-255
 180:	8f e8       	ldi	r24, 0x8F	; 143
 182:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
	
	/*设置预充电周期*/
	OledWriteByte(SET_PRECHARGE_PERIOD,OLED_CMD);
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	89 ed       	ldi	r24, 0xD9	; 217
 18a:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
	OledWriteByte(0xF1,OLED_CMD);
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	81 ef       	ldi	r24, 0xF1	; 241
 192:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
	
	/*设置VCOMH电源倍率*/
	OledWriteByte(SET_VCOMH_DESELECT_L,OLED_CMD);
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	8b ed       	ldi	r24, 0xDB	; 219
 19a:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
	OledWriteByte(0x30,OLED_CMD);
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	80 e3       	ldi	r24, 0x30	; 48
 1a2:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>

	/*关闭全局显示*/
	OledWriteByte(ENTIRE_DISPLAY_ON_A4,OLED_CMD);
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	84 ea       	ldi	r24, 0xA4	; 164
 1aa:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>

	/*设置OLED点亮方式*/
	OledWriteByte(NORMAL_DISPLAY,OLED_CMD); 	 				//0：熄灭像素；1：点亮像素
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	86 ea       	ldi	r24, 0xA6	; 166
 1b2:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>

	/*打开OLED显示*/
	OledWriteByte(SET_DISPLAY_ON,OLED_CMD);
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	8f ea       	ldi	r24, 0xAF	; 175
 1ba:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
	
	/*清屏操作*/
	OledClearn();
 1be:	0e 94 5c 00 	call	0xb8	; 0xb8 <OledClearn>
 1c2:	08 95       	ret

000001c4 <xianshi1>:
}
void xianshi1(char Digitchar ,char y,char x)
{uchar i,j,addyl,addyh;
 1c4:	af 92       	push	r10
 1c6:	bf 92       	push	r11
 1c8:	cf 92       	push	r12
 1ca:	df 92       	push	r13
 1cc:	ef 92       	push	r14
 1ce:	ff 92       	push	r15
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
	uchar *databuf;
	

	databuf=(uchar *)(ASCII_1608+Digitchar+16);
 1d8:	20 e1       	ldi	r18, 0x10	; 16
 1da:	82 9f       	mul	r24, r18
 1dc:	c0 01       	movw	r24, r0
 1de:	11 24       	eor	r1, r1
 1e0:	9c 01       	movw	r18, r24
 1e2:	20 5a       	subi	r18, 0xA0	; 160
 1e4:	3e 4f       	sbci	r19, 0xFE	; 254
 1e6:	79 01       	movw	r14, r18
	
	/*计算当前字符显示的起始列地址*/
	addyl=x%16;										//计算列低地址
 1e8:	34 2f       	mov	r19, r20
 1ea:	3f 70       	andi	r19, 0x0F	; 15
 1ec:	a3 2e       	mov	r10, r19
	addyh=x/16+0x10;								//计算列高地址
 1ee:	42 95       	swap	r20
 1f0:	4f 70       	andi	r20, 0x0F	; 15
 1f2:	68 94       	set
 1f4:	bb 24       	eor	r11, r11
 1f6:	b4 f8       	bld	r11, 4
 1f8:	b4 0e       	add	r11, r20
 1fa:	0f 2e       	mov	r0, r31
 1fc:	f0 eb       	ldi	r31, 0xB0	; 176
 1fe:	df 2e       	mov	r13, r31
 200:	f0 2d       	mov	r31, r0
 202:	d6 0e       	add	r13, r22
 204:	0f 2e       	mov	r0, r31
 206:	f2 eb       	ldi	r31, 0xB2	; 178
 208:	cf 2e       	mov	r12, r31
 20a:	f0 2d       	mov	r31, r0
 20c:	c6 0e       	add	r12, r22

	/*显示字符*/
	for(i=0;i<2;i++)
	{
		OledWriteByte(0xb0+y+i,OLED_CMD);			//设置页地址
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	8d 2d       	mov	r24, r13
 212:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
		OledWriteByte(addyl,OLED_CMD);				//设置列低地址
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	8a 2d       	mov	r24, r10
 21a:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
		OledWriteByte(addyh,OLED_CMD);				//设置列高地址
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	8b 2d       	mov	r24, r11
 222:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
 226:	e7 01       	movw	r28, r14
 228:	87 01       	movw	r16, r14
 22a:	08 5f       	subi	r16, 0xF8	; 248
 22c:	1f 4f       	sbci	r17, 0xFF	; 255

		for(j=0;j<8;j++)
		{
			OledWriteByte(*(databuf++),OLED_DATA);
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	89 91       	ld	r24, Y+
 232:	0e 94 49 00 	call	0x92	; 0x92 <OledWriteByte>
	{
		OledWriteByte(0xb0+y+i,OLED_CMD);			//设置页地址
		OledWriteByte(addyl,OLED_CMD);				//设置列低地址
		OledWriteByte(addyh,OLED_CMD);				//设置列高地址

		for(j=0;j<8;j++)
 236:	c0 17       	cp	r28, r16
 238:	d1 07       	cpc	r29, r17
 23a:	c9 f7       	brne	.-14     	; 0x22e <xianshi1+0x6a>
 23c:	88 e0       	ldi	r24, 0x08	; 8
 23e:	e8 0e       	add	r14, r24
 240:	f1 1c       	adc	r15, r1
 242:	d3 94       	inc	r13
	/*计算当前字符显示的起始列地址*/
	addyl=x%16;										//计算列低地址
	addyh=x/16+0x10;								//计算列高地址

	/*显示字符*/
	for(i=0;i<2;i++)
 244:	dc 10       	cpse	r13, r12
 246:	e3 cf       	rjmp	.-58     	; 0x20e <xianshi1+0x4a>
		}
	}


	
}
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	1f 91       	pop	r17
 24e:	0f 91       	pop	r16
 250:	ff 90       	pop	r15
 252:	ef 90       	pop	r14
 254:	df 90       	pop	r13
 256:	cf 90       	pop	r12
 258:	bf 90       	pop	r11
 25a:	af 90       	pop	r10
 25c:	08 95       	ret

0000025e <Cache_MDigit5_int>:
	xianshi1(d2,y,x+(6+i)*2);
	xianshi1(d3,y,x+(6+i)*3);
	xianshi1(d4,y,x+(6+i)*4);
}
void Cache_MDigit5_int(int Digit,char y,char x,char i )//5位数 y0-7 x0-127
{int d0,d1,d2,d3,d4;
 25e:	6f 92       	push	r6
 260:	7f 92       	push	r7
 262:	8f 92       	push	r8
 264:	9f 92       	push	r9
 266:	af 92       	push	r10
 268:	bf 92       	push	r11
 26a:	cf 92       	push	r12
 26c:	df 92       	push	r13
 26e:	ef 92       	push	r14
 270:	ff 92       	push	r15
 272:	0f 93       	push	r16
 274:	1f 93       	push	r17
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	8c 01       	movw	r16, r24
 27c:	76 2e       	mov	r7, r22
 27e:	64 2e       	mov	r6, r20
 280:	c2 2f       	mov	r28, r18
if (Digit<0)
 282:	99 23       	and	r25, r25
 284:	3c f4       	brge	.+14     	; 0x294 <Cache_MDigit5_int+0x36>
{xianshi1(-3,y,x);
 286:	8d ef       	ldi	r24, 0xFD	; 253
 288:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <xianshi1>
	Digit=-Digit;
 28c:	11 95       	neg	r17
 28e:	01 95       	neg	r16
 290:	11 09       	sbc	r17, r1
 292:	03 c0       	rjmp	.+6      	; 0x29a <Cache_MDigit5_int+0x3c>
}
else{xianshi1(-5,y,x);}
 294:	8b ef       	ldi	r24, 0xFB	; 251
 296:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <xianshi1>
	d0=Digit/10000;
 29a:	c8 01       	movw	r24, r16
 29c:	60 e1       	ldi	r22, 0x10	; 16
 29e:	77 e2       	ldi	r23, 0x27	; 39
 2a0:	0e 94 a2 05 	call	0xb44	; 0xb44 <__divmodhi4>
 2a4:	fb 01       	movw	r30, r22
	Digit=Digit-d0*10000;
 2a6:	80 ef       	ldi	r24, 0xF0	; 240
 2a8:	98 ed       	ldi	r25, 0xD8	; 216
 2aa:	68 9f       	mul	r22, r24
 2ac:	40 01       	movw	r8, r0
 2ae:	69 9f       	mul	r22, r25
 2b0:	90 0c       	add	r9, r0
 2b2:	78 9f       	mul	r23, r24
 2b4:	90 0c       	add	r9, r0
 2b6:	11 24       	eor	r1, r1
 2b8:	08 0d       	add	r16, r8
 2ba:	19 1d       	adc	r17, r9
	d1=Digit/1000;
 2bc:	c8 01       	movw	r24, r16
 2be:	68 ee       	ldi	r22, 0xE8	; 232
 2c0:	73 e0       	ldi	r23, 0x03	; 3
 2c2:	0e 94 a2 05 	call	0xb44	; 0xb44 <__divmodhi4>
 2c6:	6b 01       	movw	r12, r22
	Digit=Digit-d1*1000;
 2c8:	88 e1       	ldi	r24, 0x18	; 24
 2ca:	9c ef       	ldi	r25, 0xFC	; 252
 2cc:	68 9f       	mul	r22, r24
 2ce:	40 01       	movw	r8, r0
 2d0:	69 9f       	mul	r22, r25
 2d2:	90 0c       	add	r9, r0
 2d4:	78 9f       	mul	r23, r24
 2d6:	90 0c       	add	r9, r0
 2d8:	11 24       	eor	r1, r1
 2da:	08 0d       	add	r16, r8
 2dc:	19 1d       	adc	r17, r9
	d2=Digit/100;
 2de:	c8 01       	movw	r24, r16
 2e0:	64 e6       	ldi	r22, 0x64	; 100
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	0e 94 a2 05 	call	0xb44	; 0xb44 <__divmodhi4>
 2e8:	7b 01       	movw	r14, r22
	Digit=Digit-d2*100;
 2ea:	2c e9       	ldi	r18, 0x9C	; 156
 2ec:	26 03       	mulsu	r18, r22
 2ee:	40 01       	movw	r8, r0
 2f0:	27 9f       	mul	r18, r23
 2f2:	90 0c       	add	r9, r0
 2f4:	11 24       	eor	r1, r1
 2f6:	80 0e       	add	r8, r16
 2f8:	91 1e       	adc	r9, r17
	d3=Digit/10;
 2fa:	0f 2e       	mov	r0, r31
 2fc:	fa e0       	ldi	r31, 0x0A	; 10
 2fe:	af 2e       	mov	r10, r31
 300:	b1 2c       	mov	r11, r1
 302:	f0 2d       	mov	r31, r0
 304:	c4 01       	movw	r24, r8
 306:	b5 01       	movw	r22, r10
 308:	0e 94 a2 05 	call	0xb44	; 0xb44 <__divmodhi4>
 30c:	8b 01       	movw	r16, r22
	Digit=Digit-d3*10;
	d4=Digit%10;
	
	xianshi1(d0,y,x+6+i);
 30e:	46 e0       	ldi	r20, 0x06	; 6
 310:	4c 0f       	add	r20, r28
 312:	46 0d       	add	r20, r6
 314:	67 2d       	mov	r22, r7
 316:	8e 2f       	mov	r24, r30
 318:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <xianshi1>
	xianshi1(d1,y,x+(6+i)*2);
 31c:	d0 e0       	ldi	r29, 0x00	; 0
 31e:	26 96       	adiw	r28, 0x06	; 6
 320:	8c 2f       	mov	r24, r28
 322:	88 0f       	add	r24, r24
 324:	68 0e       	add	r6, r24
 326:	46 2d       	mov	r20, r6
 328:	67 2d       	mov	r22, r7
 32a:	8c 2d       	mov	r24, r12
 32c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <xianshi1>
	xianshi1(d2,y,x+(6+i)*3);
 330:	6c 0e       	add	r6, r28
 332:	46 2d       	mov	r20, r6
 334:	67 2d       	mov	r22, r7
 336:	8e 2d       	mov	r24, r14
 338:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <xianshi1>
	xianshi1(d3,y,x+(6+i)*4);
 33c:	6c 0e       	add	r6, r28
 33e:	46 2d       	mov	r20, r6
 340:	67 2d       	mov	r22, r7
 342:	80 2f       	mov	r24, r16
 344:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <xianshi1>
	xianshi1(d4,y,x+(6+i)*5);
 348:	4c 2f       	mov	r20, r28
 34a:	46 0d       	add	r20, r6
	d1=Digit/1000;
	Digit=Digit-d1*1000;
	d2=Digit/100;
	Digit=Digit-d2*100;
	d3=Digit/10;
	Digit=Digit-d3*10;
 34c:	26 ef       	ldi	r18, 0xF6	; 246
 34e:	20 03       	mulsu	r18, r16
 350:	c0 01       	movw	r24, r0
 352:	21 9f       	mul	r18, r17
 354:	90 0d       	add	r25, r0
 356:	11 24       	eor	r1, r1
 358:	88 0d       	add	r24, r8
 35a:	99 1d       	adc	r25, r9
	d4=Digit%10;
 35c:	b5 01       	movw	r22, r10
 35e:	0e 94 a2 05 	call	0xb44	; 0xb44 <__divmodhi4>
	
	xianshi1(d0,y,x+6+i);
	xianshi1(d1,y,x+(6+i)*2);
	xianshi1(d2,y,x+(6+i)*3);
	xianshi1(d3,y,x+(6+i)*4);
	xianshi1(d4,y,x+(6+i)*5);
 362:	67 2d       	mov	r22, r7
 364:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <xianshi1>
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	1f 91       	pop	r17
 36e:	0f 91       	pop	r16
 370:	ff 90       	pop	r15
 372:	ef 90       	pop	r14
 374:	df 90       	pop	r13
 376:	cf 90       	pop	r12
 378:	bf 90       	pop	r11
 37a:	af 90       	pop	r10
 37c:	9f 90       	pop	r9
 37e:	8f 90       	pop	r8
 380:	7f 90       	pop	r7
 382:	6f 90       	pop	r6
 384:	08 95       	ret

00000386 <port_init>:
#define D1_L	PORTA &= ~(1 << PA5)/*??????*/
#define D1_H	PORTA |= (1 << PA5)/*??????*/
int AD[8],ch[8],ch_last[8],ff,co=0;;
float P,I,D,PID;
void port_init(void)
{   DDRA = 0xf0;        //0-3????
 386:	80 ef       	ldi	r24, 0xF0	; 240
 388:	8a bb       	out	0x1a, r24	; 26
	PORTA= 0x00;
 38a:	1b ba       	out	0x1b, r1	; 27
	DDRB = 0xbf;        //pb4 0 miso ????11110111
 38c:	8f eb       	ldi	r24, 0xBF	; 191
 38e:	87 bb       	out	0x17, r24	; 23
	PORTB= 0x0f;
 390:	8f e0       	ldi	r24, 0x0F	; 15
 392:	88 bb       	out	0x18, r24	; 24
	DDRC = 0xff; 		   //PC????
 394:	8f ef       	ldi	r24, 0xFF	; 255
 396:	84 bb       	out	0x14, r24	; 20
	PORTC= 0xff; 		   //????? ???????
 398:	85 bb       	out	0x15, r24	; 21
	DDRD = 0xF7;              //???3??????????
 39a:	87 ef       	ldi	r24, 0xF7	; 247
 39c:	81 bb       	out	0x11, r24	; 17
	PORTD=0x00;
 39e:	12 ba       	out	0x12, r1	; 18
 3a0:	08 95       	ret

000003a2 <adc_init>:
}
/********AD????????********/
void adc_init(void)
{ ADCSRA = 0x00;  //ADC????????????0
 3a2:	16 b8       	out	0x06, r1	; 6
	ADMUX = 0x44; //AVCC??ο????,????AD4
 3a4:	84 e4       	ldi	r24, 0x44	; 68
 3a6:	87 b9       	out	0x07, r24	; 7
	ACSR=1<<ACD;//??????????
 3a8:	80 e8       	ldi	r24, 0x80	; 128
 3aa:	88 b9       	out	0x08, r24	; 8
	ADCSRA = 0x83;  // ???ADC,????,8???
 3ac:	83 e8       	ldi	r24, 0x83	; 131
 3ae:	86 b9       	out	0x06, r24	; 6
 3b0:	08 95       	ret

000003b2 <adc_read>:
}

/********AD???********/
unsigned int adc_read(unsigned char ADCChannel)
{ unsigned int data,h,l;unsigned char i;
	ADMUX = (ADMUX & 0xf0)+(ADCChannel & 0x0f);
 3b2:	97 b1       	in	r25, 0x07	; 7
 3b4:	8f 70       	andi	r24, 0x0F	; 15
 3b6:	90 7f       	andi	r25, 0xF0	; 240
 3b8:	98 0f       	add	r25, r24
 3ba:	97 b9       	out	0x07, r25	; 7
 3bc:	44 e0       	ldi	r20, 0x04	; 4
	data = 0;
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	90 e0       	ldi	r25, 0x00	; 0
	for (i=0;i<4;i++)                        //??????
	{     ADCSRA|=0x40;                   //??????
 3c2:	36 9a       	sbi	0x06, 6	; 6
		while ((ADCSRA&0x10)==0);       //???????
 3c4:	34 9b       	sbis	0x06, 4	; 6
 3c6:	fe cf       	rjmp	.-4      	; 0x3c4 <adc_read+0x12>
		ADCSRA|=0x10;                   //????λ
 3c8:	34 9a       	sbi	0x06, 4	; 6
		l=ADCL;                         //??λ????
 3ca:	24 b1       	in	r18, 0x04	; 4
		h=ADCH;                         //??λ????
 3cc:	55 b1       	in	r21, 0x05	; 5
		h<<=8;                          //???????
 3ce:	30 e0       	ldi	r19, 0x00	; 0
		h|=l;                           //
 3d0:	35 2b       	or	r19, r21
		data+=h;                        //???????
 3d2:	82 0f       	add	r24, r18
 3d4:	93 1f       	adc	r25, r19
 3d6:	41 50       	subi	r20, 0x01	; 1
/********AD???********/
unsigned int adc_read(unsigned char ADCChannel)
{ unsigned int data,h,l;unsigned char i;
	ADMUX = (ADMUX & 0xf0)+(ADCChannel & 0x0f);
	data = 0;
	for (i=0;i<4;i++)                        //??????
 3d8:	a1 f7       	brne	.-24     	; 0x3c2 <adc_read+0x10>
		h|=l;                           //
		data+=h;                        //???????
	}
	data/=4;                              //??????
	return data;
}
 3da:	96 95       	lsr	r25
 3dc:	87 95       	ror	r24
 3de:	96 95       	lsr	r25
 3e0:	87 95       	ror	r24
 3e2:	08 95       	ret

000003e4 <timer0_init>:
/********?????1?????********/
void timer0_init(void)
{   SREG = 0x80;          // ???????ж?
 3e4:	80 e8       	ldi	r24, 0x80	; 128
 3e6:	8f bf       	out	0x3f, r24	; 63
	
	TCCR0=0x03;
 3e8:	83 e0       	ldi	r24, 0x03	; 3
 3ea:	83 bf       	out	0x33, r24	; 51
	TCNT0=0X00;
 3ec:	12 be       	out	0x32, r1	; 50
	OCR0=0X70;
 3ee:	80 e7       	ldi	r24, 0x70	; 112
 3f0:	8c bf       	out	0x3c, r24	; 60
	TIMSK|=0x03;        //????ж????
 3f2:	89 b7       	in	r24, 0x39	; 57
 3f4:	83 60       	ori	r24, 0x03	; 3
 3f6:	89 bf       	out	0x39, r24	; 57
 3f8:	08 95       	ret

000003fa <main>:
}



int main(void)
{   port_init();
 3fa:	0e 94 c3 01 	call	0x386	; 0x386 <port_init>
	OledInit ();
 3fe:	0e 94 79 00 	call	0xf2	; 0xf2 <OledInit>
	timer0_init();
 402:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <timer0_init>
	adc_init()   ;              //A/D????? 
 406:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <adc_init>
    while(1)
    { ch[0]=((adc_read(0) ))*0.8+ch[0]*0.2;
 40a:	00 e8       	ldi	r16, 0x80	; 128
 40c:	16 e0       	ldi	r17, 0x06	; 6
		ch[1]=((adc_read(1) ))*0.8+ch[1]*0.2;
 40e:	0f 2e       	mov	r0, r31
 410:	f2 e8       	ldi	r31, 0x82	; 130
 412:	af 2e       	mov	r10, r31
 414:	f6 e0       	ldi	r31, 0x06	; 6
 416:	bf 2e       	mov	r11, r31
 418:	f0 2d       	mov	r31, r0
		if (ch[0]>ch[1]+Blank)
		{I+=Ik;	}
		else if(ch[0]<ch[1]-Blank)
		{I-=Ik;	}
			
		D=(ch[0]-ch_last[0])*Dk;
 41a:	0f 2e       	mov	r0, r31
 41c:	fc e5       	ldi	r31, 0x5C	; 92
 41e:	8f 2e       	mov	r8, r31
 420:	f6 e0       	ldi	r31, 0x06	; 6
 422:	9f 2e       	mov	r9, r31
 424:	f0 2d       	mov	r31, r0
		{PID=0xfe;
		}
		if ((PID<15))
		{co++;
			if (co>200)
			{co=200;
 426:	0f 2e       	mov	r0, r31
 428:	f8 ec       	ldi	r31, 0xC8	; 200
 42a:	2f 2e       	mov	r2, r31
 42c:	31 2c       	mov	r3, r1
 42e:	f0 2d       	mov	r31, r0
{   port_init();
	OledInit ();
	timer0_init();
	adc_init()   ;              //A/D????? 
    while(1)
    { ch[0]=((adc_read(0) ))*0.8+ch[0]*0.2;
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <adc_read>
 436:	bc 01       	movw	r22, r24
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 89 04 	call	0x912	; 0x912 <__floatunsisf>
 440:	2d ec       	ldi	r18, 0xCD	; 205
 442:	3c ec       	ldi	r19, 0xCC	; 204
 444:	4c e4       	ldi	r20, 0x4C	; 76
 446:	5f e3       	ldi	r21, 0x3F	; 63
 448:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__mulsf3>
 44c:	6b 01       	movw	r12, r22
 44e:	7c 01       	movw	r14, r24
 450:	f8 01       	movw	r30, r16
 452:	60 81       	ld	r22, Z
 454:	71 81       	ldd	r23, Z+1	; 0x01
 456:	88 27       	eor	r24, r24
 458:	77 fd       	sbrc	r23, 7
 45a:	80 95       	com	r24
 45c:	98 2f       	mov	r25, r24
 45e:	0e 94 8b 04 	call	0x916	; 0x916 <__floatsisf>
 462:	2d ec       	ldi	r18, 0xCD	; 205
 464:	3c ec       	ldi	r19, 0xCC	; 204
 466:	4c e4       	ldi	r20, 0x4C	; 76
 468:	5e e3       	ldi	r21, 0x3E	; 62
 46a:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__mulsf3>
 46e:	9b 01       	movw	r18, r22
 470:	ac 01       	movw	r20, r24
 472:	c7 01       	movw	r24, r14
 474:	b6 01       	movw	r22, r12
 476:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__addsf3>
 47a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__fixsfsi>
 47e:	f8 01       	movw	r30, r16
 480:	71 83       	std	Z+1, r23	; 0x01
 482:	60 83       	st	Z, r22
		ch[1]=((adc_read(1) ))*0.8+ch[1]*0.2;
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <adc_read>
 48a:	bc 01       	movw	r22, r24
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 89 04 	call	0x912	; 0x912 <__floatunsisf>
 494:	2d ec       	ldi	r18, 0xCD	; 205
 496:	3c ec       	ldi	r19, 0xCC	; 204
 498:	4c e4       	ldi	r20, 0x4C	; 76
 49a:	5f e3       	ldi	r21, 0x3F	; 63
 49c:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__mulsf3>
 4a0:	6b 01       	movw	r12, r22
 4a2:	7c 01       	movw	r14, r24
 4a4:	f5 01       	movw	r30, r10
 4a6:	60 81       	ld	r22, Z
 4a8:	71 81       	ldd	r23, Z+1	; 0x01
 4aa:	88 27       	eor	r24, r24
 4ac:	77 fd       	sbrc	r23, 7
 4ae:	80 95       	com	r24
 4b0:	98 2f       	mov	r25, r24
 4b2:	0e 94 8b 04 	call	0x916	; 0x916 <__floatsisf>
 4b6:	2d ec       	ldi	r18, 0xCD	; 205
 4b8:	3c ec       	ldi	r19, 0xCC	; 204
 4ba:	4c e4       	ldi	r20, 0x4C	; 76
 4bc:	5e e3       	ldi	r21, 0x3E	; 62
 4be:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__mulsf3>
 4c2:	9b 01       	movw	r18, r22
 4c4:	ac 01       	movw	r20, r24
 4c6:	c7 01       	movw	r24, r14
 4c8:	b6 01       	movw	r22, r12
 4ca:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__addsf3>
 4ce:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__fixsfsi>
 4d2:	6b 01       	movw	r12, r22
 4d4:	7c 01       	movw	r14, r24
 4d6:	f5 01       	movw	r30, r10
 4d8:	71 83       	std	Z+1, r23	; 0x01
 4da:	60 83       	st	Z, r22
		
		P=(ch[0]-ch[1])*Pk;
 4dc:	f8 01       	movw	r30, r16
 4de:	c0 81       	ld	r28, Z
 4e0:	d1 81       	ldd	r29, Z+1	; 0x01
 4e2:	be 01       	movw	r22, r28
 4e4:	6c 19       	sub	r22, r12
 4e6:	7d 09       	sbc	r23, r13
 4e8:	66 0f       	add	r22, r22
 4ea:	77 1f       	adc	r23, r23
 4ec:	88 27       	eor	r24, r24
 4ee:	77 fd       	sbrc	r23, 7
 4f0:	80 95       	com	r24
 4f2:	98 2f       	mov	r25, r24
 4f4:	0e 94 8b 04 	call	0x916	; 0x916 <__floatsisf>
 4f8:	2b 01       	movw	r4, r22
 4fa:	3c 01       	movw	r6, r24
 4fc:	60 93 90 06 	sts	0x0690, r22
 500:	70 93 91 06 	sts	0x0691, r23
 504:	80 93 92 06 	sts	0x0692, r24
 508:	90 93 93 06 	sts	0x0693, r25
		
		if (ch[0]>ch[1]+Blank)
 50c:	c6 01       	movw	r24, r12
 50e:	02 96       	adiw	r24, 0x02	; 2
 510:	8c 17       	cp	r24, r28
 512:	9d 07       	cpc	r25, r29
 514:	bc f4       	brge	.+46     	; 0x544 <main+0x14a>
		{I+=Ik;	}
 516:	20 e0       	ldi	r18, 0x00	; 0
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	40 e8       	ldi	r20, 0x80	; 128
 51c:	5f e3       	ldi	r21, 0x3F	; 63
 51e:	60 91 6c 06 	lds	r22, 0x066C
 522:	70 91 6d 06 	lds	r23, 0x066D
 526:	80 91 6e 06 	lds	r24, 0x066E
 52a:	90 91 6f 06 	lds	r25, 0x066F
 52e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__addsf3>
 532:	60 93 6c 06 	sts	0x066C, r22
 536:	70 93 6d 06 	sts	0x066D, r23
 53a:	80 93 6e 06 	sts	0x066E, r24
 53e:	90 93 6f 06 	sts	0x066F, r25
 542:	1c c0       	rjmp	.+56     	; 0x57c <main+0x182>
		else if(ch[0]<ch[1]-Blank)
 544:	f2 e0       	ldi	r31, 0x02	; 2
 546:	cf 1a       	sub	r12, r31
 548:	d1 08       	sbc	r13, r1
 54a:	cc 15       	cp	r28, r12
 54c:	dd 05       	cpc	r29, r13
 54e:	b4 f4       	brge	.+44     	; 0x57c <main+0x182>
		{I-=Ik;	}
 550:	20 e0       	ldi	r18, 0x00	; 0
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	40 e8       	ldi	r20, 0x80	; 128
 556:	5f e3       	ldi	r21, 0x3F	; 63
 558:	60 91 6c 06 	lds	r22, 0x066C
 55c:	70 91 6d 06 	lds	r23, 0x066D
 560:	80 91 6e 06 	lds	r24, 0x066E
 564:	90 91 6f 06 	lds	r25, 0x066F
 568:	0e 94 ef 03 	call	0x7de	; 0x7de <__subsf3>
 56c:	60 93 6c 06 	sts	0x066C, r22
 570:	70 93 6d 06 	sts	0x066D, r23
 574:	80 93 6e 06 	sts	0x066E, r24
 578:	90 93 6f 06 	sts	0x066F, r25
			
		D=(ch[0]-ch_last[0])*Dk;
 57c:	f4 01       	movw	r30, r8
 57e:	80 81       	ld	r24, Z
 580:	91 81       	ldd	r25, Z+1	; 0x01
 582:	be 01       	movw	r22, r28
 584:	68 1b       	sub	r22, r24
 586:	79 0b       	sbc	r23, r25
 588:	88 27       	eor	r24, r24
 58a:	77 fd       	sbrc	r23, 7
 58c:	80 95       	com	r24
 58e:	98 2f       	mov	r25, r24
 590:	0e 94 8b 04 	call	0x916	; 0x916 <__floatsisf>
 594:	26 e6       	ldi	r18, 0x66	; 102
 596:	36 e6       	ldi	r19, 0x66	; 102
 598:	46 e0       	ldi	r20, 0x06	; 6
 59a:	50 e4       	ldi	r21, 0x40	; 64
 59c:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__mulsf3>
 5a0:	9b 01       	movw	r18, r22
 5a2:	ac 01       	movw	r20, r24
 5a4:	60 93 54 06 	sts	0x0654, r22
 5a8:	70 93 55 06 	sts	0x0655, r23
 5ac:	80 93 56 06 	sts	0x0656, r24
 5b0:	90 93 57 06 	sts	0x0657, r25
		ch_last[0]=ch[0];
 5b4:	f4 01       	movw	r30, r8
 5b6:	d1 83       	std	Z+1, r29	; 0x01
 5b8:	c0 83       	st	Z, r28
		
			
		PID=P+D+I;
 5ba:	c3 01       	movw	r24, r6
 5bc:	b2 01       	movw	r22, r4
 5be:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__addsf3>
 5c2:	20 91 6c 06 	lds	r18, 0x066C
 5c6:	30 91 6d 06 	lds	r19, 0x066D
 5ca:	40 91 6e 06 	lds	r20, 0x066E
 5ce:	50 91 6f 06 	lds	r21, 0x066F
 5d2:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__addsf3>
 5d6:	6b 01       	movw	r12, r22
 5d8:	7c 01       	movw	r14, r24
		if (PID<0)
 5da:	20 e0       	ldi	r18, 0x00	; 0
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	a9 01       	movw	r20, r18
 5e0:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__cmpsf2>
 5e4:	88 23       	and	r24, r24
 5e6:	4c f0       	brlt	.+18     	; 0x5fa <main+0x200>
			
		D=(ch[0]-ch_last[0])*Dk;
		ch_last[0]=ch[0];
		
			
		PID=P+D+I;
 5e8:	c0 92 58 06 	sts	0x0658, r12
 5ec:	d0 92 59 06 	sts	0x0659, r13
 5f0:	e0 92 5a 06 	sts	0x065A, r14
 5f4:	f0 92 5b 06 	sts	0x065B, r15
 5f8:	0c c0       	rjmp	.+24     	; 0x612 <main+0x218>
		if (PID<0)
		{PID=-PID;}
 5fa:	f7 fa       	bst	r15, 7
 5fc:	f0 94       	com	r15
 5fe:	f7 f8       	bld	r15, 7
 600:	f0 94       	com	r15
 602:	c0 92 58 06 	sts	0x0658, r12
 606:	d0 92 59 06 	sts	0x0659, r13
 60a:	e0 92 5a 06 	sts	0x065A, r14
 60e:	f0 92 5b 06 	sts	0x065B, r15
		
		if (PID>0xfe)
 612:	c0 90 58 06 	lds	r12, 0x0658
 616:	d0 90 59 06 	lds	r13, 0x0659
 61a:	e0 90 5a 06 	lds	r14, 0x065A
 61e:	f0 90 5b 06 	lds	r15, 0x065B
 622:	20 e0       	ldi	r18, 0x00	; 0
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	4e e7       	ldi	r20, 0x7E	; 126
 628:	53 e4       	ldi	r21, 0x43	; 67
 62a:	c7 01       	movw	r24, r14
 62c:	b6 01       	movw	r22, r12
 62e:	0e 94 3b 05 	call	0xa76	; 0xa76 <__gesf2>
 632:	18 16       	cp	r1, r24
 634:	6c f4       	brge	.+26     	; 0x650 <main+0x256>
		{PID=0xfe;
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	ae e7       	ldi	r26, 0x7E	; 126
 63c:	b3 e4       	ldi	r27, 0x43	; 67
 63e:	80 93 58 06 	sts	0x0658, r24
 642:	90 93 59 06 	sts	0x0659, r25
 646:	a0 93 5a 06 	sts	0x065A, r26
 64a:	b0 93 5b 06 	sts	0x065B, r27
 64e:	1b c0       	rjmp	.+54     	; 0x686 <main+0x28c>
		}
		if ((PID<15))
 650:	20 e0       	ldi	r18, 0x00	; 0
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	40 e7       	ldi	r20, 0x70	; 112
 656:	51 e4       	ldi	r21, 0x41	; 65
 658:	c7 01       	movw	r24, r14
 65a:	b6 01       	movw	r22, r12
 65c:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__cmpsf2>
 660:	88 23       	and	r24, r24
 662:	8c f4       	brge	.+34     	; 0x686 <main+0x28c>
		{co++;
 664:	80 91 50 06 	lds	r24, 0x0650
 668:	90 91 51 06 	lds	r25, 0x0651
 66c:	01 96       	adiw	r24, 0x01	; 1
 66e:	90 93 51 06 	sts	0x0651, r25
 672:	80 93 50 06 	sts	0x0650, r24
			if (co>200)
 676:	89 3c       	cpi	r24, 0xC9	; 201
 678:	91 05       	cpc	r25, r1
 67a:	54 f0       	brlt	.+20     	; 0x690 <main+0x296>
			{co=200;
 67c:	30 92 51 06 	sts	0x0651, r3
 680:	20 92 50 06 	sts	0x0650, r2
 684:	07 c0       	rjmp	.+14     	; 0x694 <main+0x29a>
			}
		}
		else{co=0;}
 686:	10 92 51 06 	sts	0x0651, r1
 68a:	10 92 50 06 	sts	0x0650, r1
 68e:	06 c0       	rjmp	.+12     	; 0x69c <main+0x2a2>
		
		if (co>10)
 690:	0b 97       	sbiw	r24, 0x0b	; 11
 692:	24 f0       	brlt	.+8      	; 0x69c <main+0x2a2>
		{TCCR0=0x00;
 694:	13 be       	out	0x33, r1	; 51
			D0_L;
 696:	dc 98       	cbi	0x1b, 4	; 27
			D1_L;
 698:	dd 98       	cbi	0x1b, 5	; 27
 69a:	13 c0       	rjmp	.+38     	; 0x6c2 <main+0x2c8>
		}
		else{
			TCCR0=0x03;
 69c:	f3 e0       	ldi	r31, 0x03	; 3
 69e:	f3 bf       	out	0x33, r31	; 51
			OCR0=0xff-PID;
 6a0:	20 91 58 06 	lds	r18, 0x0658
 6a4:	30 91 59 06 	lds	r19, 0x0659
 6a8:	40 91 5a 06 	lds	r20, 0x065A
 6ac:	50 91 5b 06 	lds	r21, 0x065B
 6b0:	60 e0       	ldi	r22, 0x00	; 0
 6b2:	70 e0       	ldi	r23, 0x00	; 0
 6b4:	8f e7       	ldi	r24, 0x7F	; 127
 6b6:	93 e4       	ldi	r25, 0x43	; 67
 6b8:	0e 94 ef 03 	call	0x7de	; 0x7de <__subsf3>
 6bc:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__fixunssfsi>
 6c0:	6c bf       	out	0x3c, r22	; 60
		}
		OCR0=0xff-PID;
 6c2:	20 91 58 06 	lds	r18, 0x0658
 6c6:	30 91 59 06 	lds	r19, 0x0659
 6ca:	40 91 5a 06 	lds	r20, 0x065A
 6ce:	50 91 5b 06 	lds	r21, 0x065B
 6d2:	60 e0       	ldi	r22, 0x00	; 0
 6d4:	70 e0       	ldi	r23, 0x00	; 0
 6d6:	8f e7       	ldi	r24, 0x7F	; 127
 6d8:	93 e4       	ldi	r25, 0x43	; 67
 6da:	0e 94 ef 03 	call	0x7de	; 0x7de <__subsf3>
 6de:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__fixunssfsi>
 6e2:	6c bf       	out	0x3c, r22	; 60
	
		Cache_MDigit5_int( ch[0],0,0,1);Cache_MDigit5_int(ch[1],0,50,1);
 6e4:	21 e0       	ldi	r18, 0x01	; 1
 6e6:	40 e0       	ldi	r20, 0x00	; 0
 6e8:	60 e0       	ldi	r22, 0x00	; 0
 6ea:	f8 01       	movw	r30, r16
 6ec:	80 81       	ld	r24, Z
 6ee:	91 81       	ldd	r25, Z+1	; 0x01
 6f0:	0e 94 2f 01 	call	0x25e	; 0x25e <Cache_MDigit5_int>
 6f4:	21 e0       	ldi	r18, 0x01	; 1
 6f6:	42 e3       	ldi	r20, 0x32	; 50
 6f8:	60 e0       	ldi	r22, 0x00	; 0
 6fa:	f5 01       	movw	r30, r10
 6fc:	80 81       	ld	r24, Z
 6fe:	91 81       	ldd	r25, Z+1	; 0x01
 700:	0e 94 2f 01 	call	0x25e	; 0x25e <Cache_MDigit5_int>
		Cache_MDigit5_int(P,4,0,1);Cache_MDigit5_int(I,4,50,1);
 704:	60 91 90 06 	lds	r22, 0x0690
 708:	70 91 91 06 	lds	r23, 0x0691
 70c:	80 91 92 06 	lds	r24, 0x0692
 710:	90 91 93 06 	lds	r25, 0x0693
 714:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__fixsfsi>
 718:	dc 01       	movw	r26, r24
 71a:	cb 01       	movw	r24, r22
 71c:	21 e0       	ldi	r18, 0x01	; 1
 71e:	40 e0       	ldi	r20, 0x00	; 0
 720:	64 e0       	ldi	r22, 0x04	; 4
 722:	0e 94 2f 01 	call	0x25e	; 0x25e <Cache_MDigit5_int>
 726:	60 91 6c 06 	lds	r22, 0x066C
 72a:	70 91 6d 06 	lds	r23, 0x066D
 72e:	80 91 6e 06 	lds	r24, 0x066E
 732:	90 91 6f 06 	lds	r25, 0x066F
 736:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__fixsfsi>
 73a:	dc 01       	movw	r26, r24
 73c:	cb 01       	movw	r24, r22
 73e:	21 e0       	ldi	r18, 0x01	; 1
 740:	42 e3       	ldi	r20, 0x32	; 50
 742:	64 e0       	ldi	r22, 0x04	; 4
 744:	0e 94 2f 01 	call	0x25e	; 0x25e <Cache_MDigit5_int>
		Cache_MDigit5_int(D,6,0,1);
 748:	60 91 54 06 	lds	r22, 0x0654
 74c:	70 91 55 06 	lds	r23, 0x0655
 750:	80 91 56 06 	lds	r24, 0x0656
 754:	90 91 57 06 	lds	r25, 0x0657
 758:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__fixsfsi>
 75c:	dc 01       	movw	r26, r24
 75e:	cb 01       	movw	r24, r22
 760:	21 e0       	ldi	r18, 0x01	; 1
 762:	40 e0       	ldi	r20, 0x00	; 0
 764:	66 e0       	ldi	r22, 0x06	; 6
 766:	0e 94 2f 01 	call	0x25e	; 0x25e <Cache_MDigit5_int>
		
        //TODO:: Please write your application code 
    }
 76a:	62 ce       	rjmp	.-828    	; 0x430 <main+0x36>

0000076c <__vector_11>:
}
ISR(TIMER0_OVF_vect)//????ж? T1
{TCNT0=0X00;
 76c:	1f 92       	push	r1
 76e:	0f 92       	push	r0
 770:	0f b6       	in	r0, 0x3f	; 63
 772:	0f 92       	push	r0
 774:	11 24       	eor	r1, r1
 776:	12 be       	out	0x32, r1	; 50
D0_L;
 778:	dc 98       	cbi	0x1b, 4	; 27
D1_L;
 77a:	dd 98       	cbi	0x1b, 5	; 27
}
 77c:	0f 90       	pop	r0
 77e:	0f be       	out	0x3f, r0	; 63
 780:	0f 90       	pop	r0
 782:	1f 90       	pop	r1
 784:	18 95       	reti

00000786 <__vector_10>:
	ISR(TIMER0_COMP_vect)//????ж? T1
	{if (ch[0]>ch[1])
 786:	1f 92       	push	r1
 788:	0f 92       	push	r0
 78a:	0f b6       	in	r0, 0x3f	; 63
 78c:	0f 92       	push	r0
 78e:	11 24       	eor	r1, r1
 790:	2f 93       	push	r18
 792:	3f 93       	push	r19
 794:	8f 93       	push	r24
 796:	9f 93       	push	r25
 798:	20 91 80 06 	lds	r18, 0x0680
 79c:	30 91 81 06 	lds	r19, 0x0681
 7a0:	80 91 82 06 	lds	r24, 0x0682
 7a4:	90 91 83 06 	lds	r25, 0x0683
 7a8:	82 17       	cp	r24, r18
 7aa:	93 07       	cpc	r25, r19
 7ac:	3c f4       	brge	.+14     	; 0x7bc <__vector_10+0x36>
	{   D0_L;
 7ae:	dc 98       	cbi	0x1b, 4	; 27
		D1_H;
 7b0:	dd 9a       	sbi	0x1b, 5	; 27
		ff=0;	
 7b2:	10 92 53 06 	sts	0x0653, r1
 7b6:	10 92 52 06 	sts	0x0652, r1
 7ba:	08 c0       	rjmp	.+16     	; 0x7cc <__vector_10+0x46>
	}
	else{
		 D0_H;
 7bc:	dc 9a       	sbi	0x1b, 4	; 27
		 D1_L;
 7be:	dd 98       	cbi	0x1b, 5	; 27
		
		ff=5;}
 7c0:	85 e0       	ldi	r24, 0x05	; 5
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	90 93 53 06 	sts	0x0653, r25
 7c8:	80 93 52 06 	sts	0x0652, r24
	}
 7cc:	9f 91       	pop	r25
 7ce:	8f 91       	pop	r24
 7d0:	3f 91       	pop	r19
 7d2:	2f 91       	pop	r18
 7d4:	0f 90       	pop	r0
 7d6:	0f be       	out	0x3f, r0	; 63
 7d8:	0f 90       	pop	r0
 7da:	1f 90       	pop	r1
 7dc:	18 95       	reti

000007de <__subsf3>:
 7de:	50 58       	subi	r21, 0x80	; 128

000007e0 <__addsf3>:
 7e0:	bb 27       	eor	r27, r27
 7e2:	aa 27       	eor	r26, r26
 7e4:	0e d0       	rcall	.+28     	; 0x802 <__addsf3x>
 7e6:	0d c1       	rjmp	.+538    	; 0xa02 <__fp_round>
 7e8:	fe d0       	rcall	.+508    	; 0x9e6 <__fp_pscA>
 7ea:	30 f0       	brcs	.+12     	; 0x7f8 <__addsf3+0x18>
 7ec:	03 d1       	rcall	.+518    	; 0x9f4 <__fp_pscB>
 7ee:	20 f0       	brcs	.+8      	; 0x7f8 <__addsf3+0x18>
 7f0:	31 f4       	brne	.+12     	; 0x7fe <__addsf3+0x1e>
 7f2:	9f 3f       	cpi	r25, 0xFF	; 255
 7f4:	11 f4       	brne	.+4      	; 0x7fa <__addsf3+0x1a>
 7f6:	1e f4       	brtc	.+6      	; 0x7fe <__addsf3+0x1e>
 7f8:	f3 c0       	rjmp	.+486    	; 0x9e0 <__fp_nan>
 7fa:	0e f4       	brtc	.+2      	; 0x7fe <__addsf3+0x1e>
 7fc:	e0 95       	com	r30
 7fe:	e7 fb       	bst	r30, 7
 800:	e9 c0       	rjmp	.+466    	; 0x9d4 <__fp_inf>

00000802 <__addsf3x>:
 802:	e9 2f       	mov	r30, r25
 804:	0f d1       	rcall	.+542    	; 0xa24 <__fp_split3>
 806:	80 f3       	brcs	.-32     	; 0x7e8 <__addsf3+0x8>
 808:	ba 17       	cp	r27, r26
 80a:	62 07       	cpc	r22, r18
 80c:	73 07       	cpc	r23, r19
 80e:	84 07       	cpc	r24, r20
 810:	95 07       	cpc	r25, r21
 812:	18 f0       	brcs	.+6      	; 0x81a <__addsf3x+0x18>
 814:	71 f4       	brne	.+28     	; 0x832 <__addsf3x+0x30>
 816:	9e f5       	brtc	.+102    	; 0x87e <__stack+0x1f>
 818:	27 c1       	rjmp	.+590    	; 0xa68 <__fp_zero>
 81a:	0e f4       	brtc	.+2      	; 0x81e <__addsf3x+0x1c>
 81c:	e0 95       	com	r30
 81e:	0b 2e       	mov	r0, r27
 820:	ba 2f       	mov	r27, r26
 822:	a0 2d       	mov	r26, r0
 824:	0b 01       	movw	r0, r22
 826:	b9 01       	movw	r22, r18
 828:	90 01       	movw	r18, r0
 82a:	0c 01       	movw	r0, r24
 82c:	ca 01       	movw	r24, r20
 82e:	a0 01       	movw	r20, r0
 830:	11 24       	eor	r1, r1
 832:	ff 27       	eor	r31, r31
 834:	59 1b       	sub	r21, r25
 836:	99 f0       	breq	.+38     	; 0x85e <__addsf3x+0x5c>
 838:	59 3f       	cpi	r21, 0xF9	; 249
 83a:	50 f4       	brcc	.+20     	; 0x850 <__addsf3x+0x4e>
 83c:	50 3e       	cpi	r21, 0xE0	; 224
 83e:	68 f1       	brcs	.+90     	; 0x89a <__stack+0x3b>
 840:	1a 16       	cp	r1, r26
 842:	f0 40       	sbci	r31, 0x00	; 0
 844:	a2 2f       	mov	r26, r18
 846:	23 2f       	mov	r18, r19
 848:	34 2f       	mov	r19, r20
 84a:	44 27       	eor	r20, r20
 84c:	58 5f       	subi	r21, 0xF8	; 248
 84e:	f3 cf       	rjmp	.-26     	; 0x836 <__addsf3x+0x34>
 850:	46 95       	lsr	r20
 852:	37 95       	ror	r19
 854:	27 95       	ror	r18
 856:	a7 95       	ror	r26
 858:	f0 40       	sbci	r31, 0x00	; 0
 85a:	53 95       	inc	r21
 85c:	c9 f7       	brne	.-14     	; 0x850 <__addsf3x+0x4e>
 85e:	7e f4       	brtc	.+30     	; 0x87e <__stack+0x1f>
 860:	1f 16       	cp	r1, r31
 862:	ba 0b       	sbc	r27, r26
 864:	62 0b       	sbc	r22, r18
 866:	73 0b       	sbc	r23, r19
 868:	84 0b       	sbc	r24, r20
 86a:	ba f0       	brmi	.+46     	; 0x89a <__stack+0x3b>
 86c:	91 50       	subi	r25, 0x01	; 1
 86e:	a1 f0       	breq	.+40     	; 0x898 <__stack+0x39>
 870:	ff 0f       	add	r31, r31
 872:	bb 1f       	adc	r27, r27
 874:	66 1f       	adc	r22, r22
 876:	77 1f       	adc	r23, r23
 878:	88 1f       	adc	r24, r24
 87a:	c2 f7       	brpl	.-16     	; 0x86c <__stack+0xd>
 87c:	0e c0       	rjmp	.+28     	; 0x89a <__stack+0x3b>
 87e:	ba 0f       	add	r27, r26
 880:	62 1f       	adc	r22, r18
 882:	73 1f       	adc	r23, r19
 884:	84 1f       	adc	r24, r20
 886:	48 f4       	brcc	.+18     	; 0x89a <__stack+0x3b>
 888:	87 95       	ror	r24
 88a:	77 95       	ror	r23
 88c:	67 95       	ror	r22
 88e:	b7 95       	ror	r27
 890:	f7 95       	ror	r31
 892:	9e 3f       	cpi	r25, 0xFE	; 254
 894:	08 f0       	brcs	.+2      	; 0x898 <__stack+0x39>
 896:	b3 cf       	rjmp	.-154    	; 0x7fe <__addsf3+0x1e>
 898:	93 95       	inc	r25
 89a:	88 0f       	add	r24, r24
 89c:	08 f0       	brcs	.+2      	; 0x8a0 <__stack+0x41>
 89e:	99 27       	eor	r25, r25
 8a0:	ee 0f       	add	r30, r30
 8a2:	97 95       	ror	r25
 8a4:	87 95       	ror	r24
 8a6:	08 95       	ret

000008a8 <__cmpsf2>:
 8a8:	71 d0       	rcall	.+226    	; 0x98c <__fp_cmp>
 8aa:	08 f4       	brcc	.+2      	; 0x8ae <__cmpsf2+0x6>
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	08 95       	ret

000008b0 <__fixsfsi>:
 8b0:	04 d0       	rcall	.+8      	; 0x8ba <__fixunssfsi>
 8b2:	68 94       	set
 8b4:	b1 11       	cpse	r27, r1
 8b6:	d9 c0       	rjmp	.+434    	; 0xa6a <__fp_szero>
 8b8:	08 95       	ret

000008ba <__fixunssfsi>:
 8ba:	bc d0       	rcall	.+376    	; 0xa34 <__fp_splitA>
 8bc:	88 f0       	brcs	.+34     	; 0x8e0 <__fixunssfsi+0x26>
 8be:	9f 57       	subi	r25, 0x7F	; 127
 8c0:	90 f0       	brcs	.+36     	; 0x8e6 <__fixunssfsi+0x2c>
 8c2:	b9 2f       	mov	r27, r25
 8c4:	99 27       	eor	r25, r25
 8c6:	b7 51       	subi	r27, 0x17	; 23
 8c8:	a0 f0       	brcs	.+40     	; 0x8f2 <__fixunssfsi+0x38>
 8ca:	d1 f0       	breq	.+52     	; 0x900 <__fixunssfsi+0x46>
 8cc:	66 0f       	add	r22, r22
 8ce:	77 1f       	adc	r23, r23
 8d0:	88 1f       	adc	r24, r24
 8d2:	99 1f       	adc	r25, r25
 8d4:	1a f0       	brmi	.+6      	; 0x8dc <__fixunssfsi+0x22>
 8d6:	ba 95       	dec	r27
 8d8:	c9 f7       	brne	.-14     	; 0x8cc <__fixunssfsi+0x12>
 8da:	12 c0       	rjmp	.+36     	; 0x900 <__fixunssfsi+0x46>
 8dc:	b1 30       	cpi	r27, 0x01	; 1
 8de:	81 f0       	breq	.+32     	; 0x900 <__fixunssfsi+0x46>
 8e0:	c3 d0       	rcall	.+390    	; 0xa68 <__fp_zero>
 8e2:	b1 e0       	ldi	r27, 0x01	; 1
 8e4:	08 95       	ret
 8e6:	c0 c0       	rjmp	.+384    	; 0xa68 <__fp_zero>
 8e8:	67 2f       	mov	r22, r23
 8ea:	78 2f       	mov	r23, r24
 8ec:	88 27       	eor	r24, r24
 8ee:	b8 5f       	subi	r27, 0xF8	; 248
 8f0:	39 f0       	breq	.+14     	; 0x900 <__fixunssfsi+0x46>
 8f2:	b9 3f       	cpi	r27, 0xF9	; 249
 8f4:	cc f3       	brlt	.-14     	; 0x8e8 <__fixunssfsi+0x2e>
 8f6:	86 95       	lsr	r24
 8f8:	77 95       	ror	r23
 8fa:	67 95       	ror	r22
 8fc:	b3 95       	inc	r27
 8fe:	d9 f7       	brne	.-10     	; 0x8f6 <__fixunssfsi+0x3c>
 900:	3e f4       	brtc	.+14     	; 0x910 <__fixunssfsi+0x56>
 902:	90 95       	com	r25
 904:	80 95       	com	r24
 906:	70 95       	com	r23
 908:	61 95       	neg	r22
 90a:	7f 4f       	sbci	r23, 0xFF	; 255
 90c:	8f 4f       	sbci	r24, 0xFF	; 255
 90e:	9f 4f       	sbci	r25, 0xFF	; 255
 910:	08 95       	ret

00000912 <__floatunsisf>:
 912:	e8 94       	clt
 914:	09 c0       	rjmp	.+18     	; 0x928 <__floatsisf+0x12>

00000916 <__floatsisf>:
 916:	97 fb       	bst	r25, 7
 918:	3e f4       	brtc	.+14     	; 0x928 <__floatsisf+0x12>
 91a:	90 95       	com	r25
 91c:	80 95       	com	r24
 91e:	70 95       	com	r23
 920:	61 95       	neg	r22
 922:	7f 4f       	sbci	r23, 0xFF	; 255
 924:	8f 4f       	sbci	r24, 0xFF	; 255
 926:	9f 4f       	sbci	r25, 0xFF	; 255
 928:	99 23       	and	r25, r25
 92a:	a9 f0       	breq	.+42     	; 0x956 <__floatsisf+0x40>
 92c:	f9 2f       	mov	r31, r25
 92e:	96 e9       	ldi	r25, 0x96	; 150
 930:	bb 27       	eor	r27, r27
 932:	93 95       	inc	r25
 934:	f6 95       	lsr	r31
 936:	87 95       	ror	r24
 938:	77 95       	ror	r23
 93a:	67 95       	ror	r22
 93c:	b7 95       	ror	r27
 93e:	f1 11       	cpse	r31, r1
 940:	f8 cf       	rjmp	.-16     	; 0x932 <__floatsisf+0x1c>
 942:	fa f4       	brpl	.+62     	; 0x982 <__floatsisf+0x6c>
 944:	bb 0f       	add	r27, r27
 946:	11 f4       	brne	.+4      	; 0x94c <__floatsisf+0x36>
 948:	60 ff       	sbrs	r22, 0
 94a:	1b c0       	rjmp	.+54     	; 0x982 <__floatsisf+0x6c>
 94c:	6f 5f       	subi	r22, 0xFF	; 255
 94e:	7f 4f       	sbci	r23, 0xFF	; 255
 950:	8f 4f       	sbci	r24, 0xFF	; 255
 952:	9f 4f       	sbci	r25, 0xFF	; 255
 954:	16 c0       	rjmp	.+44     	; 0x982 <__floatsisf+0x6c>
 956:	88 23       	and	r24, r24
 958:	11 f0       	breq	.+4      	; 0x95e <__floatsisf+0x48>
 95a:	96 e9       	ldi	r25, 0x96	; 150
 95c:	11 c0       	rjmp	.+34     	; 0x980 <__floatsisf+0x6a>
 95e:	77 23       	and	r23, r23
 960:	21 f0       	breq	.+8      	; 0x96a <__floatsisf+0x54>
 962:	9e e8       	ldi	r25, 0x8E	; 142
 964:	87 2f       	mov	r24, r23
 966:	76 2f       	mov	r23, r22
 968:	05 c0       	rjmp	.+10     	; 0x974 <__floatsisf+0x5e>
 96a:	66 23       	and	r22, r22
 96c:	71 f0       	breq	.+28     	; 0x98a <__floatsisf+0x74>
 96e:	96 e8       	ldi	r25, 0x86	; 134
 970:	86 2f       	mov	r24, r22
 972:	70 e0       	ldi	r23, 0x00	; 0
 974:	60 e0       	ldi	r22, 0x00	; 0
 976:	2a f0       	brmi	.+10     	; 0x982 <__floatsisf+0x6c>
 978:	9a 95       	dec	r25
 97a:	66 0f       	add	r22, r22
 97c:	77 1f       	adc	r23, r23
 97e:	88 1f       	adc	r24, r24
 980:	da f7       	brpl	.-10     	; 0x978 <__floatsisf+0x62>
 982:	88 0f       	add	r24, r24
 984:	96 95       	lsr	r25
 986:	87 95       	ror	r24
 988:	97 f9       	bld	r25, 7
 98a:	08 95       	ret

0000098c <__fp_cmp>:
 98c:	99 0f       	add	r25, r25
 98e:	00 08       	sbc	r0, r0
 990:	55 0f       	add	r21, r21
 992:	aa 0b       	sbc	r26, r26
 994:	e0 e8       	ldi	r30, 0x80	; 128
 996:	fe ef       	ldi	r31, 0xFE	; 254
 998:	16 16       	cp	r1, r22
 99a:	17 06       	cpc	r1, r23
 99c:	e8 07       	cpc	r30, r24
 99e:	f9 07       	cpc	r31, r25
 9a0:	c0 f0       	brcs	.+48     	; 0x9d2 <__fp_cmp+0x46>
 9a2:	12 16       	cp	r1, r18
 9a4:	13 06       	cpc	r1, r19
 9a6:	e4 07       	cpc	r30, r20
 9a8:	f5 07       	cpc	r31, r21
 9aa:	98 f0       	brcs	.+38     	; 0x9d2 <__fp_cmp+0x46>
 9ac:	62 1b       	sub	r22, r18
 9ae:	73 0b       	sbc	r23, r19
 9b0:	84 0b       	sbc	r24, r20
 9b2:	95 0b       	sbc	r25, r21
 9b4:	39 f4       	brne	.+14     	; 0x9c4 <__fp_cmp+0x38>
 9b6:	0a 26       	eor	r0, r26
 9b8:	61 f0       	breq	.+24     	; 0x9d2 <__fp_cmp+0x46>
 9ba:	23 2b       	or	r18, r19
 9bc:	24 2b       	or	r18, r20
 9be:	25 2b       	or	r18, r21
 9c0:	21 f4       	brne	.+8      	; 0x9ca <__fp_cmp+0x3e>
 9c2:	08 95       	ret
 9c4:	0a 26       	eor	r0, r26
 9c6:	09 f4       	brne	.+2      	; 0x9ca <__fp_cmp+0x3e>
 9c8:	a1 40       	sbci	r26, 0x01	; 1
 9ca:	a6 95       	lsr	r26
 9cc:	8f ef       	ldi	r24, 0xFF	; 255
 9ce:	81 1d       	adc	r24, r1
 9d0:	81 1d       	adc	r24, r1
 9d2:	08 95       	ret

000009d4 <__fp_inf>:
 9d4:	97 f9       	bld	r25, 7
 9d6:	9f 67       	ori	r25, 0x7F	; 127
 9d8:	80 e8       	ldi	r24, 0x80	; 128
 9da:	70 e0       	ldi	r23, 0x00	; 0
 9dc:	60 e0       	ldi	r22, 0x00	; 0
 9de:	08 95       	ret

000009e0 <__fp_nan>:
 9e0:	9f ef       	ldi	r25, 0xFF	; 255
 9e2:	80 ec       	ldi	r24, 0xC0	; 192
 9e4:	08 95       	ret

000009e6 <__fp_pscA>:
 9e6:	00 24       	eor	r0, r0
 9e8:	0a 94       	dec	r0
 9ea:	16 16       	cp	r1, r22
 9ec:	17 06       	cpc	r1, r23
 9ee:	18 06       	cpc	r1, r24
 9f0:	09 06       	cpc	r0, r25
 9f2:	08 95       	ret

000009f4 <__fp_pscB>:
 9f4:	00 24       	eor	r0, r0
 9f6:	0a 94       	dec	r0
 9f8:	12 16       	cp	r1, r18
 9fa:	13 06       	cpc	r1, r19
 9fc:	14 06       	cpc	r1, r20
 9fe:	05 06       	cpc	r0, r21
 a00:	08 95       	ret

00000a02 <__fp_round>:
 a02:	09 2e       	mov	r0, r25
 a04:	03 94       	inc	r0
 a06:	00 0c       	add	r0, r0
 a08:	11 f4       	brne	.+4      	; 0xa0e <__fp_round+0xc>
 a0a:	88 23       	and	r24, r24
 a0c:	52 f0       	brmi	.+20     	; 0xa22 <__fp_round+0x20>
 a0e:	bb 0f       	add	r27, r27
 a10:	40 f4       	brcc	.+16     	; 0xa22 <__fp_round+0x20>
 a12:	bf 2b       	or	r27, r31
 a14:	11 f4       	brne	.+4      	; 0xa1a <__fp_round+0x18>
 a16:	60 ff       	sbrs	r22, 0
 a18:	04 c0       	rjmp	.+8      	; 0xa22 <__fp_round+0x20>
 a1a:	6f 5f       	subi	r22, 0xFF	; 255
 a1c:	7f 4f       	sbci	r23, 0xFF	; 255
 a1e:	8f 4f       	sbci	r24, 0xFF	; 255
 a20:	9f 4f       	sbci	r25, 0xFF	; 255
 a22:	08 95       	ret

00000a24 <__fp_split3>:
 a24:	57 fd       	sbrc	r21, 7
 a26:	90 58       	subi	r25, 0x80	; 128
 a28:	44 0f       	add	r20, r20
 a2a:	55 1f       	adc	r21, r21
 a2c:	59 f0       	breq	.+22     	; 0xa44 <__fp_splitA+0x10>
 a2e:	5f 3f       	cpi	r21, 0xFF	; 255
 a30:	71 f0       	breq	.+28     	; 0xa4e <__fp_splitA+0x1a>
 a32:	47 95       	ror	r20

00000a34 <__fp_splitA>:
 a34:	88 0f       	add	r24, r24
 a36:	97 fb       	bst	r25, 7
 a38:	99 1f       	adc	r25, r25
 a3a:	61 f0       	breq	.+24     	; 0xa54 <__fp_splitA+0x20>
 a3c:	9f 3f       	cpi	r25, 0xFF	; 255
 a3e:	79 f0       	breq	.+30     	; 0xa5e <__fp_splitA+0x2a>
 a40:	87 95       	ror	r24
 a42:	08 95       	ret
 a44:	12 16       	cp	r1, r18
 a46:	13 06       	cpc	r1, r19
 a48:	14 06       	cpc	r1, r20
 a4a:	55 1f       	adc	r21, r21
 a4c:	f2 cf       	rjmp	.-28     	; 0xa32 <__fp_split3+0xe>
 a4e:	46 95       	lsr	r20
 a50:	f1 df       	rcall	.-30     	; 0xa34 <__fp_splitA>
 a52:	08 c0       	rjmp	.+16     	; 0xa64 <__fp_splitA+0x30>
 a54:	16 16       	cp	r1, r22
 a56:	17 06       	cpc	r1, r23
 a58:	18 06       	cpc	r1, r24
 a5a:	99 1f       	adc	r25, r25
 a5c:	f1 cf       	rjmp	.-30     	; 0xa40 <__fp_splitA+0xc>
 a5e:	86 95       	lsr	r24
 a60:	71 05       	cpc	r23, r1
 a62:	61 05       	cpc	r22, r1
 a64:	08 94       	sec
 a66:	08 95       	ret

00000a68 <__fp_zero>:
 a68:	e8 94       	clt

00000a6a <__fp_szero>:
 a6a:	bb 27       	eor	r27, r27
 a6c:	66 27       	eor	r22, r22
 a6e:	77 27       	eor	r23, r23
 a70:	cb 01       	movw	r24, r22
 a72:	97 f9       	bld	r25, 7
 a74:	08 95       	ret

00000a76 <__gesf2>:
 a76:	8a df       	rcall	.-236    	; 0x98c <__fp_cmp>
 a78:	08 f4       	brcc	.+2      	; 0xa7c <__gesf2+0x6>
 a7a:	8f ef       	ldi	r24, 0xFF	; 255
 a7c:	08 95       	ret

00000a7e <__mulsf3>:
 a7e:	0b d0       	rcall	.+22     	; 0xa96 <__mulsf3x>
 a80:	c0 cf       	rjmp	.-128    	; 0xa02 <__fp_round>
 a82:	b1 df       	rcall	.-158    	; 0x9e6 <__fp_pscA>
 a84:	28 f0       	brcs	.+10     	; 0xa90 <__mulsf3+0x12>
 a86:	b6 df       	rcall	.-148    	; 0x9f4 <__fp_pscB>
 a88:	18 f0       	brcs	.+6      	; 0xa90 <__mulsf3+0x12>
 a8a:	95 23       	and	r25, r21
 a8c:	09 f0       	breq	.+2      	; 0xa90 <__mulsf3+0x12>
 a8e:	a2 cf       	rjmp	.-188    	; 0x9d4 <__fp_inf>
 a90:	a7 cf       	rjmp	.-178    	; 0x9e0 <__fp_nan>
 a92:	11 24       	eor	r1, r1
 a94:	ea cf       	rjmp	.-44     	; 0xa6a <__fp_szero>

00000a96 <__mulsf3x>:
 a96:	c6 df       	rcall	.-116    	; 0xa24 <__fp_split3>
 a98:	a0 f3       	brcs	.-24     	; 0xa82 <__mulsf3+0x4>

00000a9a <__mulsf3_pse>:
 a9a:	95 9f       	mul	r25, r21
 a9c:	d1 f3       	breq	.-12     	; 0xa92 <__mulsf3+0x14>
 a9e:	95 0f       	add	r25, r21
 aa0:	50 e0       	ldi	r21, 0x00	; 0
 aa2:	55 1f       	adc	r21, r21
 aa4:	62 9f       	mul	r22, r18
 aa6:	f0 01       	movw	r30, r0
 aa8:	72 9f       	mul	r23, r18
 aaa:	bb 27       	eor	r27, r27
 aac:	f0 0d       	add	r31, r0
 aae:	b1 1d       	adc	r27, r1
 ab0:	63 9f       	mul	r22, r19
 ab2:	aa 27       	eor	r26, r26
 ab4:	f0 0d       	add	r31, r0
 ab6:	b1 1d       	adc	r27, r1
 ab8:	aa 1f       	adc	r26, r26
 aba:	64 9f       	mul	r22, r20
 abc:	66 27       	eor	r22, r22
 abe:	b0 0d       	add	r27, r0
 ac0:	a1 1d       	adc	r26, r1
 ac2:	66 1f       	adc	r22, r22
 ac4:	82 9f       	mul	r24, r18
 ac6:	22 27       	eor	r18, r18
 ac8:	b0 0d       	add	r27, r0
 aca:	a1 1d       	adc	r26, r1
 acc:	62 1f       	adc	r22, r18
 ace:	73 9f       	mul	r23, r19
 ad0:	b0 0d       	add	r27, r0
 ad2:	a1 1d       	adc	r26, r1
 ad4:	62 1f       	adc	r22, r18
 ad6:	83 9f       	mul	r24, r19
 ad8:	a0 0d       	add	r26, r0
 ada:	61 1d       	adc	r22, r1
 adc:	22 1f       	adc	r18, r18
 ade:	74 9f       	mul	r23, r20
 ae0:	33 27       	eor	r19, r19
 ae2:	a0 0d       	add	r26, r0
 ae4:	61 1d       	adc	r22, r1
 ae6:	23 1f       	adc	r18, r19
 ae8:	84 9f       	mul	r24, r20
 aea:	60 0d       	add	r22, r0
 aec:	21 1d       	adc	r18, r1
 aee:	82 2f       	mov	r24, r18
 af0:	76 2f       	mov	r23, r22
 af2:	6a 2f       	mov	r22, r26
 af4:	11 24       	eor	r1, r1
 af6:	9f 57       	subi	r25, 0x7F	; 127
 af8:	50 40       	sbci	r21, 0x00	; 0
 afa:	8a f0       	brmi	.+34     	; 0xb1e <__mulsf3_pse+0x84>
 afc:	e1 f0       	breq	.+56     	; 0xb36 <__mulsf3_pse+0x9c>
 afe:	88 23       	and	r24, r24
 b00:	4a f0       	brmi	.+18     	; 0xb14 <__mulsf3_pse+0x7a>
 b02:	ee 0f       	add	r30, r30
 b04:	ff 1f       	adc	r31, r31
 b06:	bb 1f       	adc	r27, r27
 b08:	66 1f       	adc	r22, r22
 b0a:	77 1f       	adc	r23, r23
 b0c:	88 1f       	adc	r24, r24
 b0e:	91 50       	subi	r25, 0x01	; 1
 b10:	50 40       	sbci	r21, 0x00	; 0
 b12:	a9 f7       	brne	.-22     	; 0xafe <__mulsf3_pse+0x64>
 b14:	9e 3f       	cpi	r25, 0xFE	; 254
 b16:	51 05       	cpc	r21, r1
 b18:	70 f0       	brcs	.+28     	; 0xb36 <__mulsf3_pse+0x9c>
 b1a:	5c cf       	rjmp	.-328    	; 0x9d4 <__fp_inf>
 b1c:	a6 cf       	rjmp	.-180    	; 0xa6a <__fp_szero>
 b1e:	5f 3f       	cpi	r21, 0xFF	; 255
 b20:	ec f3       	brlt	.-6      	; 0xb1c <__mulsf3_pse+0x82>
 b22:	98 3e       	cpi	r25, 0xE8	; 232
 b24:	dc f3       	brlt	.-10     	; 0xb1c <__mulsf3_pse+0x82>
 b26:	86 95       	lsr	r24
 b28:	77 95       	ror	r23
 b2a:	67 95       	ror	r22
 b2c:	b7 95       	ror	r27
 b2e:	f7 95       	ror	r31
 b30:	e7 95       	ror	r30
 b32:	9f 5f       	subi	r25, 0xFF	; 255
 b34:	c1 f7       	brne	.-16     	; 0xb26 <__mulsf3_pse+0x8c>
 b36:	fe 2b       	or	r31, r30
 b38:	88 0f       	add	r24, r24
 b3a:	91 1d       	adc	r25, r1
 b3c:	96 95       	lsr	r25
 b3e:	87 95       	ror	r24
 b40:	97 f9       	bld	r25, 7
 b42:	08 95       	ret

00000b44 <__divmodhi4>:
 b44:	97 fb       	bst	r25, 7
 b46:	07 2e       	mov	r0, r23
 b48:	16 f4       	brtc	.+4      	; 0xb4e <__divmodhi4+0xa>
 b4a:	00 94       	com	r0
 b4c:	07 d0       	rcall	.+14     	; 0xb5c <__divmodhi4_neg1>
 b4e:	77 fd       	sbrc	r23, 7
 b50:	09 d0       	rcall	.+18     	; 0xb64 <__divmodhi4_neg2>
 b52:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__udivmodhi4>
 b56:	07 fc       	sbrc	r0, 7
 b58:	05 d0       	rcall	.+10     	; 0xb64 <__divmodhi4_neg2>
 b5a:	3e f4       	brtc	.+14     	; 0xb6a <__divmodhi4_exit>

00000b5c <__divmodhi4_neg1>:
 b5c:	90 95       	com	r25
 b5e:	81 95       	neg	r24
 b60:	9f 4f       	sbci	r25, 0xFF	; 255
 b62:	08 95       	ret

00000b64 <__divmodhi4_neg2>:
 b64:	70 95       	com	r23
 b66:	61 95       	neg	r22
 b68:	7f 4f       	sbci	r23, 0xFF	; 255

00000b6a <__divmodhi4_exit>:
 b6a:	08 95       	ret

00000b6c <__udivmodhi4>:
 b6c:	aa 1b       	sub	r26, r26
 b6e:	bb 1b       	sub	r27, r27
 b70:	51 e1       	ldi	r21, 0x11	; 17
 b72:	07 c0       	rjmp	.+14     	; 0xb82 <__udivmodhi4_ep>

00000b74 <__udivmodhi4_loop>:
 b74:	aa 1f       	adc	r26, r26
 b76:	bb 1f       	adc	r27, r27
 b78:	a6 17       	cp	r26, r22
 b7a:	b7 07       	cpc	r27, r23
 b7c:	10 f0       	brcs	.+4      	; 0xb82 <__udivmodhi4_ep>
 b7e:	a6 1b       	sub	r26, r22
 b80:	b7 0b       	sbc	r27, r23

00000b82 <__udivmodhi4_ep>:
 b82:	88 1f       	adc	r24, r24
 b84:	99 1f       	adc	r25, r25
 b86:	5a 95       	dec	r21
 b88:	a9 f7       	brne	.-22     	; 0xb74 <__udivmodhi4_loop>
 b8a:	80 95       	com	r24
 b8c:	90 95       	com	r25
 b8e:	bc 01       	movw	r22, r24
 b90:	cd 01       	movw	r24, r26
 b92:	08 95       	ret

00000b94 <_exit>:
 b94:	f8 94       	cli

00000b96 <__stop_program>:
 b96:	ff cf       	rjmp	.-2      	; 0xb96 <__stop_program>
